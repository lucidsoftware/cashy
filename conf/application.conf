# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="jC`1@M4?A/_rpds0UV<Jc96=1Te]Kwv`BFvfDgfia0TH:gq?`=xN3^GC<=n[E_:>"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
application.global="com.lucidchart.open.cashy.Global"

# Router 
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point. 
# Furthermore, it's assumed your route file is named properly. 
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~ 
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

db.default.driver="com.mysql.jdbc.Driver"
db.default.url="jdbc:mysql://localhost/cashy"
db.default.user="dev"
db.default.password="dev"
db.default.partitionCount="1"
db.default.maxConnectionsPerPartition="10"
db.default.minConnectionsPerPartition="1"
db.default.acquireIncrement="1"
db.default.acquireRetryAttempts="10"
db.default.acquireRetryDelay="100"
db.default.connectionTimeout="100"
db.default.idleMaxAge="300000"
db.default.maxConnectionAge="3600000"
db.default.disableJMX="true"
db.default.idleConnectionTestPeriod="60000"

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root="ERROR"

# Logger used by the framework:
logger.play="INFO"

# Logger provided to your application:
logger.application="DEBUG"

# Application Context
# ~~~~~
application.context = "/"

# Sessions
# ~~~~~
# session.cookieName = "PLAY_SESSION"
# session.secure = "false"
# session.maxAge = "86400"
# session.httpOnly = "true"
# session.domain = "www.example.com"
flash.cookieName = "appflash"

# Authentication
# ~~~~~
auth.cookie.name = "auth"
auth.cookie.path = "/"
#auth.cookie.domain = "localhost"
auth.cookie.secure = "false"
auth.cookie.ttl = "86400"
auth.cookie.remembermeMaxAge = "1209600"

# Mailer
# ~~~~~
mailer.enabled = "true"
mailer.debug = "false"
mailer.smtp.host = "localhost"
mailer.smtp.port = "25"
mailer.smtp.user = ""
mailer.smtp.pass = ""
mailer.fromEmail = "cashy@cashy.com"
# the email of the person who gets alert emails about the state of cashy
mailer.alertEmail = ""

# Google Oauth
# ~~~~~
auth.google.clientId = ""
auth.google.secret = ""
auth.google.oauthEndpoint = "https://accounts.google.com/o/oauth2/auth"
auth.google.tokenEndpoint = "https://www.googleapis.com/oauth2/v3/token"
auth.google.tokenInfoEndpoint = "https://www.googleapis.com/oauth2/v1/tokeninfo"
auth.google.domainWhitelist = ["lucidchart.com"]

# Amazon S3
# ~~~~~
amazon.s3.enabled = true
amazon.s3.bucketCloudfrontMap {
	"dev-cashy" = {
		cloudfront = "http://d2zt0093sgpvii.cloudfront.net/"
	}
}
amazon.s3.fullAccessUrl = "https://s3.amazonaws.com/"
amazon.s3.cdn.version = "1"
amazon.s3.upload.timeout = 30
amazon.s3.upload.cachetime = 2592000
amazon.s3.listing.maxKeys = 100
amazon.s3.syncFrequency = 86400
amazon.s3.tempUploadPrefix = ".cashy"

kraken.enabled = true
kraken.imageUploadUrl = "https://api.kraken.io/v1/url"
kraken.usageUrl = "https://api.kraken.io/user_status"
kraken.usageAlertThreshold = .9
kraken.apiKey = ""
kraken.apiSecret = ""

upload.minNestedDirectories = 2
upload.extensions = ["js", "css", "jpg", "jpeg", "png", "gif", "txt", "csv"]
upload.jsExtensions = ["js"]
upload.cssExtensions = ["css"]
upload.imageExtensions = ["jpg", "jpeg", "png", "gif"]
upload.minGzipSavings = .2
upload.jsCompression.enabled = true
upload.cssCompression.enabled = true

# the max number of results to show up in the search feature
search.max = 50

akka.cashysystem {
	akka {
		actor {
			default-dispatcher {
				executor = thread-pool-executor

				thread-pool-executor {
					core-pool-size-min = 8
					core-pool-size-factor = 1.0
					core-pool-size-max = 100
				}
			}
		}
	}
}

# the max number of results to show per page of audits
audit.max = 50
